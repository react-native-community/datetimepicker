version: 2.1

orbs:
  rn: react-native-community/react-native@4.4.2

#######
# commands:
#   android_emulator_start:
#     description: Installs and starts an Android emulator with the given version and name.
#     parameters:
#       build_tools_version:
#         default: 28.0.3
#         description: The version of the Android build tools to install.
#         type: string
#       device_name:
#         default: TestingAVD
#         description: >-
#           The name of the AVD. You use this name to tell which device to run tests
#           on.
#         type: string
#       logcat_grep:
#         default: com.reactnativecommunity
#         description: >-
#           ADB logs will be shown in the "Start Android Emulator" commands, but we
#           filter it using grep to avoid noise. You can specify additional strings to
#           grep for. Make sure you escape special characters.
#         type: string
#       platform_version:
#         default: android-28
#         description: >-
#           The version of android to run on the emulator. Usually in the form of
#           "android-28".
#         type: string
#     steps:
#       - run:
#           command: >
#             yes | sdkmanager "platform-tools" "tools" >/dev/null

#             yes | sdkmanager "platforms;<<parameters.platform_version>>"
#             "system-images;<<parameters.platform_version>>;default;x86_64"
#             >/dev/null

#             yes | sdkmanager "emulator" --channel=3 >/dev/null

#             yes | sdkmanager "build-tools;<<parameters.build_tools_version>>"
#             >/dev/null

#             yes | sdkmanager --licenses >/dev/null

#             yes | sdkmanager --list
#           name: Install Android Emulator
#           shell: /bin/bash -e
#       - run:
#           command: |
#             adb start-server
#             adb devices
#             adb kill-server
#             ls -la ~/.android
#           name: ADB Start Stop
#       - run:
#           command: >-
#             avdmanager create avd --force --name <<parameters.device_name>>
#             --package "system-images;<<parameters.platform_version>>;default;x86_64"
#             --tag default --device pixel
#           name: Create Android Emulator
#       - run:
#           background: true
#           command: >
#             $ANDROID_HOME/emulator/emulator @<<parameters.device_name>> -version

#             $ANDROID_HOME/emulator/emulator @<<parameters.device_name>> -cores 1 -gpu auto -accel on -memory 1024 -no-audio -no-snapshot
#             -no-boot-anim -no-window -logcat *:W | grep -i
#             'ReactNative\|<<parameters.logcat_grep>>'
#           name: Start Android Emulator (background)
#       - run:
#           command: >
#             export BOOT=""

#             echo "Waiting for AVD to finish booting"

#             export PATH=$(dirname $(dirname $(command -v
#             android)))/platform-tools:$PATH

#             until [[ "$BOOT" =~ "1" ]]; do
#               sleep 5
#               export BOOT=$(adb -e shell getprop sys.boot_completed 2>&1)
#             done

#             sleep 15

#             adb shell settings put global window_animation_scale 0

#             adb shell settings put global transition_animation_scale 0

#             adb shell settings put global animator_duration_scale 0

#             echo "Android Virtual Device is now ready."
#           name: Wait for AVD to be ready
#           no_output_timeout: 5m

jobs:
  checkout_code:
    executor:
      name: rn/linux_js
      node_version: '12.10.0'
    steps:
      - checkout
      - persist_to_workspace:
          paths: .
          root: .
  analyse_js:
    executor: rn/linux_js
    steps:
      - attach_workspace:
          at: .
      # - rn/yarn_install
      - run:
          command: yarn install --frozen-lockfile
          name: yarn install
      - run:
          command: yarn lint
          name: Run ESLint
      - run:
          command: yarn flow
          name: Flow
      - run:
          command: yarn test
          name: Jest
  e2e_release_ios:
    executor:
      name: rn/macos
      xcode_version: '11.4.0'
    steps:
      - attach_workspace:
          at: .
      - rn/setup_macos_executor:
          node_version: '12.10.0'
      - rn/ios_simulator_start:
          device: 'iPhone 11'
      # - rn/yarn_install
      - run:
          command: yarn install --frozen-lockfile
          name: yarn install
      - rn/pod_install:
          pod_install_directory: 'example/ios'
      - run:
          command: yarn detox:ios:build:release
          name: build for detox
      - run:
          command: yarn detox:ios:test:release
          name: test detox
      - store_artifacts:
          path: ./artifacts
  e2e_release_android:
    # we need to use mac to run emulator with acceleration
    # see https://support.circleci.com/hc/en-us/articles/360000028928-Testing-with-Android-emulator-on-CircleCI-2-0
    executor:
      name: rn/macos
      xcode_version: '11.4.0'
    steps:
      - attach_workspace:
          at: .
      - rn/setup_macos_executor:
          node_version: '12.10.0'
      # - rn/yarn_install
      - run:
          command: yarn install --frozen-lockfile
          name: yarn install
      - rn/android_emulator_start:
          logcat_grep: 'com.reactcommunity.rndatetimepicker'
      - run:
          command: yarn detox:android:build:release
          name: build for detox
      - run:
          command: yarn detox:android:test:release
          name: test detox
      - store_artifacts:
          path: ./artifacts

workflows:
  test:
    jobs:
      - checkout_code
      - analyse_js:
          requires:
            - checkout_code
      - e2e_release_ios:
          requires:
            - analyse_js
      - e2e_release_android:
          requires:
            - analyse_js
